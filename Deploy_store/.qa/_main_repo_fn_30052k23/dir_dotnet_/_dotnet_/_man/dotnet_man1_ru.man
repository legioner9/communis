(1) .NET (1)

команда точки сети
       Эта статья относится к: ✔️ .NET Core 2.1 SDK и более поздним версиям.

ИМЯ
       dotnet — универсальный драйвер для .NET CLI.

СИНТАКСИС
       Чтобы получить информацию о доступных командах и среде:

              dotnet [--версия] [--info] [--list-runtimes] [--list-sdks]

              дотнет -h|--помощь

       Чтобы запустить команду (требуется установка SDK):

              dotnet <КОМАНДА> [-d|--diagnostics] [-h|--help] [--verbosity <LEVEL>]
                  [параметры команды] [аргументы]

       Чтобы запустить приложение:

              dotnet [--additionalprobingpath <PATH>] [--additional-deps <PATH>]
                  [--fx-version <ВЕРСИЯ>] [--roll-forward <НАСТРОЙКА>]
                  <PATH_TO_APPLICATION> [аргументы]

              dotnet exec [--additionalprobingpath] [--additional-deps <PATH>]
                  [--fx-version <ВЕРСИЯ>] [--roll-forward <НАСТРОЙКА>]
                  <PATH_TO_APPLICATION> [аргументы]

       --roll-forward доступен, начиная с .NET Core 3.x. Используйте --roll-forward-on-no-candidate-fx для .NET Core 2.x.

ОПИСАНИЕ
       Команда dotnet выполняет две функции:

       • Предоставляет команды для работы с проектами .NET.

         Например, dotnet build создает проект. Каждая команда определяет свои собственные параметры и аргументы. Все команды поддерживают параметр --help для вывода краткой документации о том, как использовать
         команда.

       • Он запускает приложения .NET.

         Вы указываете путь к DLL-файлу приложения для запуска приложения. Запустить приложение означает найти и выполнить точку входа, которой в случае консольных приложений является метод Main.
         Например, dotnet myapp.dll запускает приложение myapp. См. Развертывание приложения .NET, чтобы узнать о вариантах развертывания.

ОПЦИИ
       Для самой dotnet доступны разные параметры, для запуска команды и для запуска приложения.

   Варианты для dotnet сами по себе
       Следующие параметры предназначены только для dotnet. Например, dotnet --info. Они распечатывают информацию об окружающей среде.

       • --Информация

         Выводит подробную информацию об установке .NET и среде компьютера, например о текущей операционной системе, а также фиксирует SHA версии .NET.

       • --версия

       Выводит версию пакета SDK для .NET, используемого командами dotnet. Включает эффекты любого global.json

       • --list-среды выполнения

         Распечатывает список установленных сред выполнения .NET. В версии SDK для x86 перечислены только среды выполнения x86, а в версии SDK для x64 перечислены только среды выполнения x64.

       • --list-SDKS

         Распечатывает список установленных пакетов SDK для .NET.

       • -?|-h|--помощь

         Выводит список доступных команд.

   Параметры SDK для запуска команды
       Следующие параметры предназначены для dotnet с помощью команды. Например, dotnet build --help.

       • -d|--диагностика

         Включает диагностический вывод.

       • -v|--verbosity <УРОВЕНЬ>

         Устанавливает уровень детализации команды. Допустимые значения: q[uiet], m[inimal], n[ormal], d[detailed] и diag[nostic]. Поддерживается не во всех командах. См. страницу конкретной команды, чтобы определить,
         эта опция доступна.

       • -?|-h|--помощь

         Выводит документацию для заданной команды, например dotnet build --help.

       • параметры команды

         Каждая команда определяет параметры, специфичные для этой команды. См. страницу конкретной команды для списка доступных опций.

   Параметры среды выполнения
       Следующие параметры доступны, когда dotnet запускает приложение. Например, dotnet myapp.dll --roll-forward Major.

       • --additionalprobingpath <ПУТЬ>

         Путь, содержащий политику проверки и сборки для проверки.

       • --additional-deps <ПУТЬ>

         Путь к дополнительному файлу .deps.json. Файл deps.json содержит список зависимостей, зависимостей компиляции и информацию о версии, используемую для разрешения конфликтов сборки. Для получения дополнительной информации
         см. Файлы конфигурации среды выполнения (https://github.com/dotnet/sdk/blob/main/documentation/specs/runtime-configuration-file.md) на GitHub.

       • --depsfile <PATH_TO_DEPSFILE>

         Путь к файлу deps.json. Файл deps.json — это файл конфигурации, содержащий информацию о зависимостях, необходимых для запуска приложения. Этот файл создается пакетом SDK для .NET.

       • --runtimeconfig

         Путь к файлу runtimeconfig.json. Файл runtimeconfig.json — это файл конфигурации, содержащий параметры времени выполнения. Дополнительные сведения см. в разделе Параметры конфигурации среды выполнения .NET.

       • --roll-forward <НАСТРОЙКА> Доступно, начиная с .NET Core SDK 3.0.

         Управляет тем, как накат применяется к приложению. НАСТРОЙКА может быть одним из следующих значений. Если нrce Список всех настроенных источников NuGet.

       dotnet nuget remove source Удаляет источник NuGet.
       Источник обновления dotnet nuget Обновляет источник NuGet.

   Команды рабочей нагрузки
       Функция команды
       ───────────────────────────────────────────────────── ──────────────────────────────
       dotnet workload install Устанавливает дополнительную рабочую нагрузку.
       список рабочих нагрузок dotnet Список всех установленных рабочих нагрузок.
       dotnet workload repair Восстанавливает все установленные рабочие нагрузки.
       поиск рабочих нагрузок dotnet Список выбранных рабочих нагрузок или всех доступных рабочих нагрузок.
       dotnet workload uninstall Удаляет рабочую нагрузку.
       dotnet workload update Переустанавливает все установленные рабочие нагрузки.

   Глобальные, инструментальные и локальные команды инструментов
       Инструменты — это консольные приложения, которые устанавливаются из пакетов NuGet и вызываются из командной строки. Вы можете писать инструменты самостоятельно или устанавливать инструменты, написанные третьими лицами. Инструменты все-
       так называемые глобальные инструменты, инструменты пути к инструменту и локальные инструменты. Дополнительные сведения см. в разделе Обзор инструментов .NET. Глобальные инструменты и средства пути к инструменту доступны, начиная с .NET Core SDK 2.1. Местные инструменты
       доступны, начиная с .NET Core SDK 3.0.

       Функция команды
       ───────────────────────────────────────────────────── ───────────────────────────────────────────
       dotnet tool install Устанавливает инструмент на ваш компьютер.
       список инструментов dotnet Список всех глобальных, инструментальных или локальных инструментов, установленных в настоящее время на
                               твоя машина.
       поиск инструментов dotnet Выполняет поиск в NuGet.org инструментов, в которых есть указанный поисковый запрос.
                               их имя или метаданные.
       dotnet tool uninstall Удаляет инструмент с вашего компьютера.
       dotnet tool update Обновляет инструмент, установленный на вашем компьютере.

   Дополнительные инструменты
       Начиная с .NET Core SDK 2.1.300, ряд инструментов, которые были доступны только для каждого проекта с помощью DotnetCliToolReference, теперь доступны как часть .NET SDK. Эти инструменты перечислены
       в следующей таблице:

       Функция инструмента
       ───────────────────────────────────────────────────── ──────────────────────────
       dev-certs Создает сертификаты разработки и управляет ими.
       Инструменты командной строки ef Entity Framework Core.
       sql-cache Средства командной строки для кэширования SQL Server.
       user-secrets Управляет секретами пользователей разработки.
       watch Запускает наблюдатель за файлами, который запускает команду при изменении файлов.

       Для получения дополнительных сведений о каждом инструменте введите dotnet <имя-инструмента> --help.

ПРИМЕРЫ
       Создайте новое консольное приложение .NET:

              дотнет новая консоль

       Создайте проект и его зависимости в заданном каталоге:

              сборка дотнета

       Запустите приложение:

              dotnet myapp.dll

   Смотрите также
       • Переменные среды, используемые .NET SDK, .NET CLI и средой выполнения .NET.

       • Файлы конфигурации среды выполнения (https://github.com/dotnet/sdk/blob/main/documentation/specs/runtime-configuration-file.md).

       • Параметры конфигурации среды выполнения .NET.

                                                                                                                                                                                                          (1) 
(1) .NET (1)